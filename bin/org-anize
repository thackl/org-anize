#!/bin/bash

# Author: Thomas Hackl - thackl@lim4.de
# Version: v1.0.0

# find script dir
[ -h $0 ] && SCRIPT=$(readlink "$0") || SCRIPT="$0";
SCRIPT_DIR=$(dirname $SCRIPT);

# read config
if [ -f $SCRIPT_DIR/org-anize-rc ]; then
    . $SCRIPT_DIR/org-anize-rc
fi

##----------------------------------------------------------------------------##
# a few helper functions

org-dir-path(){ dir=$(dirname $1); echo ${dir%/org}; }
org-dir-name(){ echo $(basename $(org-dir-path $1)); }
org-sup-path(){ dir=$(dirname $(org-dir-path $1)); echo ${dir%/projects}; }
org-sup-name(){ echo $(basename $(org-sup-path $1)); }
org-dir-path-short(){ dir=$(org-dir-path $1); echo ${dir/$HOME\//'~'/}; }

check-pro-max(){
    if [ $ORG_MAX_OPEN -lt ${#ORGS[@]} ]; then
        echo -e "Matching too many ${ORG_LEVEL}s!" >&2;
        exit 1;
    fi;
}

check-pro-min(){
    MATCH=$PRO
    [ $ORG_LEVEL == "workpack" ] && MATCH=$WPK
    if [ -z "$ORGS" ]; then
        echo "No $ORG_LEVEL.org file found matching '"$MATCH"'" >&2;
        exit 1;
    fi;
}

##----------------------------------------------------------------------------##
# find - sets up the PATH cache for all of the other functions
org-find(){
    ORG_PATH="$ORG_PATH_FAV" && [ $OPT_ALL ] && ORG_PATH="$ORG_PATH $ORG_PATH_MORE"
    ORG_PATH="${ORG_PATH//[:$'\n']/ }"
    ORG_PATH=$(eval echo $ORG_PATH)
    ORG_LEVEL=project
    ORGS=($(
        find $ORG_PATH -maxdepth 3 -iname "*"$PRO"*"$ORG_PRO_SUF -a ! -name ".*" |
            xargs -n1 readlink -f 2>/dev/null |
            sort | uniq
        ));
    check-pro-min;

    if [ -n "$WPK" ]; then
        ORG_LEVEL=workpack
        ORGS=($(for org in ${ORGS[@]}; do
            find $(org-dir-path $org) -maxdepth 2 -iname "*"$WPK"*"$ORG_WPK_SUF\
                 -a ! -name ".*" | sort
            done;
            ));
        check-pro-min;
    fi;
}

##
org-find-latest(){

    org-find;

    ORG_LATEST=$( ls -1t ${ORGS[@]} | head -n1 )
    ORGS=($ORG_LATEST)
}

##----------------------------------------------------------------------------##
# list projects
org-list(){
    PRO=$1; shift;
    WPK=$1; shift;

    org-find;

    if [ $ORG_LEVEL == workpack ]; then
	printf "%-30s %-15s %s\n" Workpack Project Path
    else
	printf "%-30s %-15s %s\n" Project Super Path
    fi;

    printf -- '=%.0s' {1..80}; echo;
    for org in ${ORGS[@]}; do
	printf "%-30s %-15s %s\n" \
               $(org-dir-name $org) $(org-sup-name $org) $(org-dir-path-short $org);
    done;
}

##----------------------------------------------------------------------------##
# edit
org-edit(){
    PRO=$1; shift;
    WPK=$1; shift;

    org-find-latest;

    for org in ${ORGS[@]}; do
        echo $org
        echo -e "editing $ORG_LEVEL ["$(org-dir-name $org)"]";
    done;
    $ORG_EDITOR ${ORGS[@]} &
}

##----------------------------------------------------------------------------##
# browse
org-browse(){
    PRO=$1; shift;
    WPK=$1; shift;

    org-find-latest;

    for org in ${ORGS[@]}; do
        echo "opening $pro in $ORG_FILEMANAGER"
	$ORG_FILEMANAGER $(org-dir-path $org) &
    done;
}

##----------------------------------------------------------------------------##
# return single project directory
# NOTE: actually changing the directory of the shell calling org-anize is not
# possible, because that would require to change the directory of the parent
# shell. The work-around is to provide a function that returns the target
# directory, and have the user define an alias that calls `cd $(org dir)` in the
# parent shell
org-dir(){
    PRO=$1; shift;
    WPK=$1; shift;

    org-find-latest;

    for org in ${ORGS[@]}; do
	echo $(org-dir-path $org);
    done;
}

##----------------------------------------------------------------------------##
# init
org-init(){
    PRO=$1; shift;
    [ -z "$PRO" ] && { echo 'project name required'; exit 1; }
    [ "$PRO" == "." ] && { PRO=$(basename $(pwd)); cd ../; }
    PRO_DESC="$*"
    echo "$PRO_DESC";
    PRO_DATE=$(date +"$ORG_DATE_TPL")
    mkdir -p $PRO;

    for subdir in ${ORG_PRO_DIRS//:/ }; do
        mkdir -p "$PRO/$subdir";
    done

    PRO_FILE=$PRO/$PRO$ORG_PRO_SUF; # create *-project.org at top-level
    if [ ! -e $PRO_FILE ]; then
        echo "$ORG_PRO_TPL" | while read -r line ; do
            while [[ "$line" =~ (\$\{[a-zA-Z_][a-zA-Z_0-9]*\}) ]] ; do
                LHS=${BASH_REMATCH[1]}
                RHS="$(eval echo "\"$LHS\"")"
                line=${line//$LHS/$RHS}
            done
            echo "$line" >> $PRO_FILE
        done
    fi;

    echo "Created project [$PRO]";
}

##----------------------------------------------------------------------------##
# init workpack
org-workpack(){
    WPK=$1; shift;
    [ -z "$WPK" ] && { echo 'workpack name required'; exit 1; }
    [ "$WPK" == "." ] && { WPK=$(basename $(pwd)); cd ../; }
    get-current-project

    WPK_DESC="$*"
    WPK_DATE=$(date +"$ORG_DATE_TPL")
    mkdir -p $WPK;

    for subdir in ${ORG_WPK_DIRS//:/ }; do
        mkdir -p "$WPK/$subdir";
    done

    WPK_FILE=$WPK/$WPK$ORG_WPK_SUF; # create *-workpack.org at top-level
    if [ ! -e $WPK_FILE ]; then
        echo "$ORG_WPK_TPL" | while read -r line ; do
            while [[ "$line" =~ (\$\{[a-zA-Z_][a-zA-Z_0-9]*\}) ]] ; do
                LHS=${BASH_REMATCH[1]}
                RHS="$(eval echo "\"$LHS\"")"
                line=${line//$LHS/$RHS}
            done
            echo "$line" >> $WPK_FILE
        done
    fi;

    echo "Created workpack [$WPK] in project [$PRO]";
}

# check if current dir is project
get-current-project(){
    ls *$ORG_PRO_SUF &>/dev/null || { echo "not inside a project"; exit 1; }
    ORGS=( $(pwd)/*$ORG_PRO_SUF )
    PRO=$(org-dir-name ${ORGS[0]})
}

##----------------------------------------------------------------------------##
# aliases - convenient for placing them in bashrc...
org-alias(){
    cat <<'EOF'
## org-anize
alias oi='org-anize init'          # create new org-project
alias ow='org-anize workpack'      # create new workpack in project
alias ol='org-anize list'          # find and list favorite projects
alias oL='org-anize list -a'       # find and list all projects
alias ob='org-anize browse'        # open project/workpack dir
alias oB='org-anize browse -a'     # open project/workpack dirs (all)
alias oe='org-anize edit'          # edit project/workpack org file
alias oE='org-anize edit -a'       # edit project/workpack org file (all)
od(){ cd $(org-anize dir $@); }    # change to project/workpack dir
oD(){ cd $(org-anize dir -a $@); } # change to project/workpack dir
ox(){ od $@; oe $@; }              # change dir and edit file
oX(){ od -a $@; oe -a $@; }        # change dir and edit file
EOF
}


##----------------------------------------------------------------------------##
org-help(){
    echo 'Usage: org-anize <command> [-options] [project] [description/workpack]
  partial project/workpack matches are supported in search commands

  init      initialize new project with default directory structure
  workpack  initialize new workpack within current project
  list      find and list (matching) projects
  dir       get <project [workpack]> matching directory
  edit      edit <project [workpack]> .org file in ['$ORG_EDITOR']
  browse    open <project [workpack]> directory in ['$ORG_FILEMANAGER']
  alias     print suggested shell aliases

   -a       work with all projects, default is to work only with favorites
   -V       show script version
   -h       show this help
'
}


##----------------------------------------------------------------------------##

# Require args
[ $# -eq 0 ] && { org-help && exit 0; }

# Execute getopt
ARGS=`getopt --name "SCRIPT" \
    --options "ahV" \
    -- "$@"`
[ $? -ne 0 ] && exit 1; # Exit if bad args
eval set -- "$ARGS" # A little magic

# Now go through all the options
while true; do
    case "$1" in
        # -c|--code-projects)
        #     [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
        #     CODE=$2
        #     shift 2;;
        -a) OPT_ALL=1; shift;;
	-h) org-help && exit 0;;
        -V) grep -m1 'Version' "$0" | sed 's/.*Version.\s*//'; exit 0;;
        --) shift; break;;
        *) echo "$1: Unknown option" 1>&2 && exit 1;;
  esac
done

CMD=${1:-"help"}
shift;

org-$CMD "$@";
