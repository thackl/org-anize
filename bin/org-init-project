#!/bin/bash

# Author: Thomas Hackl - thackl@lim4.de

# Initialize a project directory layout with default structure

# TODO: -c|--code-project - code project folder structure (bin/ lib/ ...) in /code/<code-project>
# TODO: -d|--description - PROJECT.txt

##---------------------------------------------------------------------------##

# find script dir
[ -h $0 ] && SCRIPT=$(readlink "$0") || SCRIPT="$0";
SCRIPT_DIR=$(dirname $SCRIPT);

# read config
if [ -f $SCRIPT_DIR/org-anize-rc ]; then
    . $SCRIPT_DIR/org-anize-rc
fi

org-init-help(){
    echo 'Usage: org-init-project <CMD> [<PROJECT/PATTERN>] [<SEARCHPATH>]
  
  find    Find and list available projects
  init    Initialize new project with default directory structure at PROJECT
  edit    Edit the master *.org file of PROJECT/PATTERN
  open    Open PROJECT/PATTERN root folder

'
}

# Opts/Args

# Execute getopt
ARGS=`getopt --name "SCRIPT" \
    --options "s:c:d:hV" \
    --longoptions "super-project:,code-project:,description:,help,version" \
    -- "$@"`

#Bad arguments
[ $? -ne 0 ] && exit 1;

# A little magic
eval set -- "$ARGS"

# Now go through all the options
while true; do
    case "$1" in
        -s|--super-project)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            SUPER=$2
            shift 2;;
            	     
        -c|--code-projects)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            CODE=$2
            shift 2;;
        -d|--description)
            [ ! -n "$2" ] && (echo "$1: value required" 1>&2 && exit 1);
            DESC=$2
            shift 2;;
	
	-h|--help)
	       org-init-help && exit 0;;

        -V|--version)
           grep -m1 'Version' "$0" | sed 's/.*Version\s*//';
           exit 0;;
	       	       	       
        --)
            shift
            break;;
        *)
            echo "$1: Unknown option" 1>&2 && exit 1;;
  esac
done

# process some args and opts
if [ $# -eq 0 ]; then
	echo "Project name required" 2>&1;
	exit 1;
fi;



##---------------------------------------------------------------------------##

PRJ_ID=$1;
PRJ_DATE=$(date +"%D")

for subdir in ${ORG_PRJ_DIRS//:/ }; do
    mkdir -p "$PRJ_ID/$subdir";
done

PRJ_FILE=$PRJ_ID/org/$PRJ_ID$ORG_PRJ_SUF;
if [ ! -e $PRJ_FILE ]; then
    echo "$ORG_PRJ_TPL" | while read -r line ; do
        while [[ "$line" =~ (\$\{[a-zA-Z_][a-zA-Z_0-9]*\}) ]] ; do
            LHS=${BASH_REMATCH[1]}
            RHS="$(eval echo "\"$LHS\"")"
            line=${line//$LHS/$RHS}
        done
        echo "$line" >> $PRJ_FILE
    done
fi;    

echo "Created $PRJ_FILE";

